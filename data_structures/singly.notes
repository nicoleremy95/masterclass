Singly Linked Lists 
    - linear
    - data structure
    - ordered
    - an array is indexed, however, a linked list has no indexes
    - contains a head, tail, and length property
    - consists of nodes and each node has a value and a pointer to another node or null
    - the length is the number of elements
    - each node is connected to the next node only in one direction
    - random access is not allowed, you have to traverse from the beginning (like an elevator)
    - these are better at insertion and deletion because you don't have to re-index and therefore takes less memory
----------------------------------------------------------------------------------------------------------
METHODS
    push    -
    pop     - removing a node from the end of the linked list 
    shift   - removing a node (the head) from the beginning of the list 
            - it takes constant time O(1) because you don't have to re  index like arrays 
    unshift - adding a new node to the beginning of the linked list
    get     - O(n) time complexity, retrieve a node by it's position in the linked list 
            - there are no indecies therefore you have to go through each item starting at the beginning, not as efficient as an array
    set     - changing the value of a node based on it's position in the linked list
    insert  - O(1) time complexity, adding a node to the linked list at a specific position
    remove  - O(1) or O(n) time complexity, remove a node from the linked list at a specific position
    reverse - reversing the linked list in place (COMMON INTERVIEW QUESTION)
----------------------------------------------------------------------------------------------------------
Example of a class constructor for a node

//define a class for each node
//piece of data -val
//reference to next node - next

class Node{
    constructor(val){
        this.val = val;
        this.next = null;
    }
}

// var first = new Node("Hi")
// first.next = new Node ("there")
// first.next.next = new Node ("buddy")
// first.next.next.next = new Node ("!")

