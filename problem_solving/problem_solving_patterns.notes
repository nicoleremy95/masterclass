Frequency Patterns

    - O(n) time complexity
    - uses objects or sets to collect values/frequencies of values
        - this can often avoid the need for nested loops or O(n^2) operations with arrays/strings
    
    ex. write a function called same, which accepts two arrays. The function should return true if every value in the array has it's corresponding value squared in the second array. The frequency of values must be the same.
        //way 1 without objects, O(n^2) time complexity
        function same(arr1, arr2){
            if(arr1.length !== arr2.length){
                return false;
            }
            for(let i = 0; i <arr1.length; i ++){
                let correctIndex = arr2.indexOf(arr1[i] **2)
                if(correctIndex === -1){
                    return false;
                }
                arr2.splice(correctIndex,1)
            }
            return true;
        }

        //way 2 with objects, O(n) time complexity
        function same(arr1,arr2){
            if(arr1.length !== arr2.length){
                return false;
            }
            let freqCount1 = {};
            let freqCount2 = {};
            for (let val of arr1){
                freqCount1[val] = (freqCount1[val] || 0) + 1
            }
            for (let val of arr2){
                freqCount2[val] = (freqCount2[val] || 0) + 1
            }
            console.log(freqCount1);
            console.log(freqCount2);
            for(let key in freqCount1){
                if(!key ** 2 in freqCount2){
                    return false;
                }
                if(freqCount2[key**2] !== freqCount1[key]){
                    return false;
                }
            }
            return true;
        }

same([1,2,3,2,5], [9,1,4,4,11])

Anagrams
    Given two strings, write a function to determine if the second string is an anagram of the first. An anagram is a word, phrase, or name formed by rearranging the letters of another, such as cinema, formed from iceman.

        Good questions to ask: what about special characters? Should I make different categories for upper and lower case? Will there also be numbers? 

    function validAnagram(str1, str2){
        //check to see if the strings are the same length
        if(str1.length !== str2.length){
            return false;
        }

        //create two objects from strings 
        let str1Obj = {};
        let str2Obj = {};
        for (let val of str1){
            str1Obj[val] = (str1Obj[val] || 0) + 1
        }
        for (let val of str2){
            str2Obj[val] = (str2Obj[val] || 0) + 1
        }

        //check values in objects
        console.log(str1Obj);
        console.log(str2Obj);
        for(let key in str1Obj){
            if(!key in str2Obj){
                return false;
            }
            if(str2Obj[key] !== str1Obj[key]){
                return false;
            }
        }
        //return true;
        return true;
    }
