Frequency Patterns

    - O(n) time complexity
    - uses objects or sets to collect values/frequencies of values
        - this can often avoid the need for nested loops or O(n^2) operations with arrays/strings
    
    ex. write a function called same, which accepts two arrays. The function should return true if every value in the array has it's corresponding value squared in the second array. The frequency of values must be the same.
        //way 1 without objects, O(n^2) time complexity
        function same(arr1, arr2){
            if(arr1.length !== arr2.length){
                return false;
            }
            for(let i = 0; i <arr1.length; i ++){
                let correctIndex = arr2.indexOf(arr1[i] **2)
                if(correctIndex === -1){
                    return false;
                }
                arr2.splice(correctIndex,1)
            }
            return true;
        }

        //way 2 with objects, O(n) time complexity
        function same(arr1,arr2){

        }