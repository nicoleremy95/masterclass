SEARCHING ALGORITHMS
----------------------------------------------------------------------------------------------------------
Linear Search:
    - goes through array starting at [0] down to the last index 
    - worse or average case O(n), best case O(1)
    * example 
        //BIG 0, O(n)
        function linearSearch(arr, val){
            let answer = -1
            for (let i = 0; i <arr.length; i ++){
                let current = arr[i]
                if(current === val){
                    answer = i
                    return answer;
                } 
            }
            return answer;
        }

        //refactored, BIG 0, O(n)
        function linearSearch(arr, val){
            for (let i = 0; i <arr.length; i ++){
                if(arr[i] === val){
                    return i;
                } 
            }
            return -1;
        }
----------------------------------------------------------------------------------------------------------
Binary Search: 
    - only works on sorted arrays 
    - pick a halfway point and moves goes either left or right to check next at the halfway point
    - "divide and conquer" method
    - best case scenario O(1), worse or average case O(log n)
    * example
        //first try, 
        function binarySearch(arr,val){
            //set index values 
            let start = 0
            let end = (arr.length) -1
            let middle = Math.floor(start + end)/2
                    
            for (let i = 0 ; i < arr.length; i ++){
                if(val === arr[middle]){
                    return middle;
                } else if (val > arr[middle] ){
                     start = middle + 1
                     middle = Math.floor(start + end)/2
                } else if (val < arr[middle] ){
                     end = middle - 1 
                     middle = Math.floor(start + end)/2
                }
            }
            return -1
        }

    //working code, BIG O, O(log n)
    function binarySearch(arr, elem) {
        var start = 0;
        var end = arr.length - 1;
        var middle = Math.floor((start + end) / 2);
        while(arr[middle] !== elem && start <= end) {
            if(elem < arr[middle]){
                end = middle - 1;
            } else {
                start = middle + 1;
            }
            middle = Math.floor((start + end) / 2);
        }
        if(arr[middle] === elem){
            return middle;
        }
        return -1;
    }

----------------------------------------------------------------------------------------------------------
NAIVE STRING SEARCH: 
    * example
        //working code, BIG O, O(n^2)
        function stringSearch (str, pattern){
            let count = 0;
            for (let i = 0; i <str.length; i ++){
                for (let j = 0; j <pattern.length; j ++){
                    if(str[i+j] !== pattern[j]){
                        break;
                    } else {
                        if(j===pattern.length-1){
                            count++
                        }
                    }
                }
            }
            return count; 
        }
        console.log(stringSearch("how are you are", "are"))