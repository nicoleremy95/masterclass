SORTING ALGORITHMS

Javascript .sort() converts everything to a string first and therefore does not work well on numbers 

Proper sort method on numbers Ascending ex.
    function numberCompare(num1, num2) {
        return num1-num2
    }
    [6,4,15,10].sort(numberCompare);
    //[4,6,10,15]

        *if it returns a negative value, num1 comes before num2, if it returns a positive value, num2 comes before num1

Compare str length longest to shortest ex.
    function compareByLen(str1, str2){
        return str2.length - str1.length;   
    }
    ["fred, "nicole", "ed", "ron"].sort(compareByLen);
    //["nicole", "fred", "ron", "ed"]
----------------------------------------------------------------------------------------------------------
Bubble Sort 
    - not that efficient, not commonly used 
    - a sorting algorithm where the largest values bubble up to the top
    - swapping values in bubble sort
        ex. ES5 
            function swap(arr, indx1, indx2){
                var temp = arr[indx1];
                arr[indx1] = arr[indx2]
                arr[indx2] = temp;
            }
        ex. ES2015
            const swap = (arr, indx1, indx2) =>{
                [arr[indx1], arr[indx2]] = [arr[indx2], arr[indx1]]
            }
    Bubble sort pseduocode 
    //[24,5,61,2,42,1]
    function bubbleSort (arr){
        for (let i = arr.length -1; i --){
            for (let j = 0; j < arr.length; j ++){
                if (arr[j] > arr[j+1]{
                    swap(arr, arr[j], arr[j+1])
                }
            }
        }
        return arr;
    }
    function bubbleSort(arr){
        for (let i = arr.length; i > 0; i --){
            // j < i -1 gives us one less comparison every time which is essential to bubble sort because you compare by one less every time
            for(let j = 0; j < i -1; j ++){
                console.log(arr, arr[j], arr[j+1])
                if (arr[j] > arr[j+1]{
                    let temp = arr[j];
                    arr[j] = arr[j+1];
                    arr[j+1] = temp;
                }
            }
            console.log("one pass complete")
        }
        return arr;
    }
    while i <= arr.length-1
    arr.length-1